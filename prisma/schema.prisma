generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(uuid())
  clerkUserId   String    @unique // clerk user id
  email         String    @unique
  name          String?
  imageUrl      String?
  transactions  Transaction[]
  accounts      Account[]
  budgets       Budget[]
  questions    Question[] // A user can post multiple questions
  answers      Answer[]   // A user can post multiple answers
  reviews       Review[]  // User can leave multiple reviews
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("users")
}

model Account {
  id           String        @id @default(uuid())
  name         String
  type         AccountType
  balance      Decimal       @default(0) // will ask inital balance while creating an account
  isDefault    Boolean       @default(false)
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([userId])
  @@map("accounts")
}

model Transaction {
  id                String            @id @default(uuid())
  type             TransactionType
  amount           Decimal
  description      String?
  date             DateTime
  category         String           
  receiptUrl       String?
  isRecurring      Boolean           @default(false)
  recurringInterval RecurringInterval? // Only used if isRecurring is true
  nextRecurringDate DateTime?         // Next date for recurring transaction
  lastProcessed    DateTime?         // Last time this recurring transaction was processed
  status           TransactionStatus  @default(COMPLETED)
  userId           String
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountId        String
  account          Account           @relation(fields: [accountId], references: [id], onDelete: Cascade)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@index([userId])
  @@index([accountId])
  @@map("transactions")
}


model Budget {
  id          String       @id @default(uuid())
  amount      Decimal
  lastAlertSent DateTime?  // Track when the last alert was sent
  userId      String       @unique
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([userId])
  @@map("budgets")
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum AccountType {
  CURRENT
  SAVINGS
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum RecurringInterval {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

model Question {
  id          String    @id @default(uuid())
  title       String
  description String?
  userId      String    @map("user_id") // Foreign key to User
  user        User      @relation(fields: [userId], references: [id])
  tags        String[]  // Tags for categorization
  views       Int       @default(0) // Number of views
  answers     Answer[]  // Related answers
  categoryId  String?   @map("category_id") // Foreign key to Category
  category    Category? @relation(fields: [categoryId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("questions")
}

model Answer {
  id         String   @id @default(uuid())
  content    String
  userId     String   @map("user_id") // Foreign key to User
  user       User     @relation(fields: [userId], references: [id])
  questionId String   @map("question_id") // Foreign key to Question
  question   Question @relation(fields: [questionId], references: [id])
  upvotes    Int      @default(0) // Number of upvotes
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("answers")
}

model Category {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?
  questions   Question[] // A category can have multiple questions
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("categories")
}

model Mentor {
  id          String    @id @default(uuid())
  name        String
  expertise   String[]  // Array of expertise areas
  imageUrl    String?
  reviews     Review[]  // One-to-many relation with Review model
  email       String?   @unique  // Optional but unique
  phone       String?   // Optional phone number
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("mentors")
}


model Review {
  id         String   @id @default(uuid())
  rating     Float    // Rating from 1.0 to 5.0
  content    String?  // Optional review text
  userId     String   // The user who wrote the review
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  mentorId   String   // The mentor being reviewed
  mentor     Mentor   @relation(fields: [mentorId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([userId])
  @@index([mentorId])
  @@map("reviews")
}


